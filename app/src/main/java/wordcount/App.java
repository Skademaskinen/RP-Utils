/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package wordcount;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.OnlineStatus;
import net.dv8tion.jda.api.entities.Activity;
import net.dv8tion.jda.api.exceptions.RateLimitedException;
import net.dv8tion.jda.api.interactions.commands.Command;
import net.dv8tion.jda.api.interactions.commands.build.CommandData;
import net.dv8tion.jda.api.requests.GatewayIntent;
import wordcount.eventListeners.SlashCommandListener;

// INVITE LINK: https://discord.com/api/oauth2/authorize?client_id=1182974918451806299&permissions=549756202048&scope=bot

public class App {
    protected JDA jda;
    private static String token;
    public static boolean debug;

    public static void main(String[] args) {
        debug = Arrays.asList(args).contains("--debug");
        token = debug ? 
            "ODU1MTQwNDg4NDk0NDQ4NjQw.Gw6Lty.a-tvq2DFozvwm1OgSHixRuVWg2e4F-ZG4Pktp4" : // Debug token
            "MTE4Mjk3NDkxODQ1MTgwNjI5OQ.GQYpGF.w28r4Yu_HA4ZoVrVoSRUt5-VIFFGhUHTvHxllM"; // Live token
        App app = new App();
        app.initialize();
        app.registerActions();

        // start webserver
        String[] webserver_command = {System.getenv("PYTHON_EXE_PATH") == null ? "python" : System.getenv("PYTHON_EXE_PATH"), "../webserver/webserver.py"};
        try {
            Process process = Runtime.getRuntime().exec(webserver_command);
            process.waitFor();
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
    protected void initialize(String token) {
        App.token = token;
        initialize();
    }

    protected void initialize(){
        System.out.println("Initializing");
        JDABuilder builder = JDABuilder.createDefault(token);
        builder.addEventListeners(new SlashCommandListener());
        builder.enableIntents(GatewayIntent.MESSAGE_CONTENT);
        builder.setActivity(Activity.playing("World of Warcraft"));
        builder.setStatus(OnlineStatus.DO_NOT_DISTURB);
        jda = builder.build();
        try {
            jda.awaitReady();
        } catch (InterruptedException e) {
            e.printStackTrace();
            System.exit(1);
        }
        System.out.println("Connected to bot with name: "+jda.getSelfUser().getName());
    }
    protected void registerActions(){
        List<CommandData> commands = new ArrayList<>();
        Path path = Path.of("src/main/java/wordcount/actions").toAbsolutePath();
        System.out.println("Got actions path: " + path.toFile());
        for(Class<?> action : Arrays.asList(path.toFile().listFiles())
            .stream()
            .filter(file -> !file.getName().equals("Action.java"))
            .map(file -> {
                try {
                    return Class.forName("wordcount.actions."+file.getName().replace(".java", ""));
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
                return null;
            }).collect(Collectors.toList())){
                try {
                    Method method = action.getMethod("initialize");
                    Object object = action.getConstructor().newInstance();
                    System.out.println("Got action: "+action.getName());
                    System.out.println("Got method: "+method.getName());
                    commands.add((CommandData) method.invoke(object));
                    
                } catch (NoSuchMethodException | SecurityException | IllegalAccessException | InvocationTargetException | InstantiationException | IllegalArgumentException e) {
                    e.printStackTrace();
                }
            }
        try {
            List<Command> result = jda.updateCommands().addCommands(commands).complete(true);
            System.out.println("Got commands: "+result.stream().map(command -> command.getFullCommandName()).collect(Collectors.joining("\t")));
        } catch (RateLimitedException e) {
            e.printStackTrace();
        }
    }
}
